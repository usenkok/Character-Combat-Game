
/*********************************************************************
** Program name: character.cpp
** Author: Kelly Usenko
** Date: 5/14/2018
** Description: Implementation of character class
*********************************************************************/

#include "character.hpp"


/******************************************************************
*                       Character::Character
* Default constructor
/******************************************************************/
Character::Character()  //initialize values to 0
{
	this->attackAmnt = 0;
	this->attackRounds = 0;
	this->attackRange = 0;

	this->defenseAmnt = 0;
	this->defenseRounds = 0;
	this->defenseRange = 0;
	
	this->attackDie = NULL;
	this->defenseDie = NULL;
	
	this->name = "Character";
	this->charType = NOT_SET;
	this->specialAbility = false;
	this->armor = 0;
	this->strength = 0;
	this->healthStatus = ALIVE;
}


/******************************************************************
*                       Character::~Character
* Destructor
/******************************************************************/
Character::~Character()
{
	this->attackDie = NULL;
	this->defenseDie = NULL;
}



/******************************************************************
* Character::getName - returns character's name based on the type
/******************************************************************/
string Character::getName()
{
	return this->name;
}


/******************************************************************
*                       Character::generateDefense()
* Generates attack gross value before defense of opponent taken into account
/******************************************************************/
int Character::generateDefense()
{
	int totalDefenseRoll = 0;

	for (int i = 0; i < this->defenseRounds; i++)
	{
		totalDefenseRoll += this->defenseDie->rollDie();
	}

	return totalDefenseRoll;
}



/******************************************************************
*                       Character::getStrengthPoints
* Returns character's current strength points
/******************************************************************/

int Character::getStrength()
{
	return this->strength;
}



/******************************************************************
*                       Character::getArmor
* Returns Character's armor attribute
/******************************************************************/

int Character::getArmor()
{
	return this->armor;
}


/******************************************************************
*                       Character::getHealthStatus()
*  Returns a character's health status. DEAD (0) ALIVE (1)
/******************************************************************/
CharacterStatus Character::getHealthStatus()
{
	return this->healthStatus;
}


/******************************************************************
*                    Character::getCharacterType()
* Returns the type of character defined by enum in Character.hpp
/******************************************************************/

CharacterType Character::getCharacterType()
{
	return this->charType;
}


/******************************************************************
*                       Character::getAttackAmnt
* Returns attack amount generated by attack function
/******************************************************************/

int Character::getAttackAmnt()
{
	return this->attackAmnt;
}


/******************************************************************
*                       Character::getDefenseAmnt
* Returns defense amount generated by defense roll
/******************************************************************/
int Character::getDefenseAmnt()
{
	return this->defenseAmnt;
}

/******************************************************************
*                       Character::getSpecialAbilityInd
* returns true or false if character has a special ability
/******************************************************************/
bool Character::getSpecialAbilityInd()
{
	return specialAbility;
}


/******************************************************************
*                       Character::printCharacterInfo
* Prints core Character attributes representing state of health
/******************************************************************/
void Character::printCharacterInfo()
{
	cout << " | Strength: " << this->strength 
		 << " | Armor: " << this->armor << " |" << endl;

}


/******************************************************************
*                       Character::Attack()
* Generates attack gross value before defense of opponent taken into account
/******************************************************************/
int Character::attack()
{
	this->attackAmnt = 0; //reset
						  //roll die and return combined total
	for (int i = 0; i < this->attackRounds; i++)
	{
		this->attackAmnt += this->attackDie->rollDie();
	}

	return this->attackAmnt;

}



/******************************************************************
*                       Character::Defend()
* Generates defense calculation of actual damage to be inflicted
/******************************************************************/

int Character::defend(int attackerAmnt)
{
	//damage = attacker roll amount - defense roll - defense armor

	int inflictedDamage = 0;
	this->defenseAmnt = this->generateDefense();

	//take input of attack generated by oponent and adjust for armor and special attributes
	inflictedDamage = attackerAmnt - this->defenseAmnt - this->armor;

	if (inflictedDamage > 0) // defense roll + armor did not deflect all damage
	{
		//subtract amount from strength 
		this->strength = this->strength - inflictedDamage;

		//check if character is still alive
		if (this->strength <= 0)
		{
			//character is dead
			this->healthStatus = DEAD;
		}
	}
	else if (inflictedDamage <= 0) //character has more defense than attack
	{
		//do not change strength
	}
	return inflictedDamage;
}
