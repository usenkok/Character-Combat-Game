/*********************************************************************
** Program name: vampire.cpp
** Author: Kelly Usenko
** Date: 5/14/2018
** Description: Implementation of vampire class
*********************************************************************/


#include "vampire.hpp"


/******************************************************************
*                       Vampire::Vampire
* Default constructor sets vampire attributes
/******************************************************************/
Vampire::Vampire()
{
	this->attackAmnt = 0;	//initialize to 0
	this->attackRounds = 1;	
	this->attackRange = 12;

	this->defenseAmnt = 0;	//initialize to 0
	this->defenseRounds = 1;
	this->defenseRange = 6;

	this->name = "Vampire";
	this->armor = 1;
	this->strength = 18;

	this->healthStatus = ALIVE;
	this->charType = VAMPIRE;
	this->specialAbility = true;

	//create attack and defense die
	this->attackDie = new Die(attackRange);
	this->defenseDie = new Die(defenseRange);

	//vampire has another die to determine whether charm takes effect
	
	charmDie = new Die(2);
	this->charmInd = false;


}

/******************************************************************
*                       Vampire::~Vampire
* Destructor
/******************************************************************/

Vampire::~Vampire()
{

	//cout << "Vampire Destructor" << endl;

	if (this->attackDie != NULL)
	{
		delete this->attackDie;
	}

	if (this->defenseDie != NULL)
	{
		delete this->defenseDie;
	}

	if (this->charmDie != NULL)
	{
		delete this->charmDie;
	}
}

/******************************************************************
*                       Vampire::defend()
* Specialized defend function for Vampires that implements charm ability
/******************************************************************/

int Vampire::defend(int attackerAmnt)
{
	//damage = attacker roll amount - defense roll - defense armor
	int inflictedDamage = 0;
	this->charmInd = false;
	int dieRoll = 0;

	dieRoll = charmDie->rollDie();

	if (dieRoll > 1)
	{
		this->charmInd = true;
		//cout << "------CHARMED IF STATEMENT------" << endl;
		this->defenseAmnt = 9999;
	}

	if (this->charmInd == false)
	{

		this->defenseAmnt = this->generateDefense();

		//take input of attack generated by oponent and adjust according to armor and special attributes
		inflictedDamage = attackerAmnt - this->defenseAmnt - this->armor;

		if (inflictedDamage > 0) // defense roll + armor did not deflect all damage
		{
			//subtract amount from strength 
			this->strength = this->strength - inflictedDamage;

			//check if character is still alive
			if (this->strength <= 0)
			{
				//character is dead
				this->healthStatus = DEAD;
			}
		}
		else if (inflictedDamage <= 0) //character has more defense than attack
		{
			//do not change strength
		}
	}

	return inflictedDamage;
}


/******************************************************************
*                       Vampire::printSpecialAbility()
* Prints indicator that charm ability occured during round
/******************************************************************/

void Vampire::printSpecialAbility()
{
	if (this->charmInd)
	{
		printCharmed();
		//reset charmed
		this->charmInd = false;
	}
}


/******************************************************************
*                       Vampire::printCharmed()
* Text to print when charm occurs
/******************************************************************/
void Vampire::printCharmed()
{
	cout << "\n~*~*~*~*~*~*~*~*~*~ CHARMED ~*~*~*~*~*~*~*~*~*~" << endl;
	cout << "~*~*~*~*~~*~ All Damage Deflected ~*~*~*~*~*~*~" << endl;
}

