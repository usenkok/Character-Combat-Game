/*********************************************************************
** Program name: bluemen.hpp
** Author: Kelly Usenko
** Date: 5/14/2018
** Description: Implementation of bluemen class. Defend function
** updates defense die (defenseRounds) based on object's strength attribute.
*********************************************************************/


#include "bluemen.hpp"


/******************************************************************
*                       Bluemen::Bluemen
* Default constructor
/******************************************************************/
Bluemen::Bluemen()
{
	this->attackAmnt = 0;	//initialize to 0
	this->attackRounds = 2;
	this->attackRange = 10;

	this->defenseAmnt = 0;	//initialize to 0
	this->defenseRounds = 3;
	this->defenseRange = 6;

	this->name = "Bluemen";
	this->armor = 3;
	this->strength = 12;

	this->healthStatus = ALIVE;
	this->charType = BLUEMEN;
	this->specialAbility = true;
	lostDefenseInd = false;

	//create attack and defense die
	this->attackDie = new Die(attackRange);
	this->defenseDie = new Die(defenseRange);
}


/******************************************************************
*                       Bluemen::~Bluemen
* Destructor
/******************************************************************/

Bluemen::~Bluemen()
{
	if (this->attackDie != NULL)
	{
		delete this->attackDie;
	}

	if (this->defenseDie != NULL)
	{
		delete this->defenseDie;
	}
}


/******************************************************************
*                       Bluemen::Defend()
* Generates defense calculation of actual damage to be inflicted
/******************************************************************/

int Bluemen::defend(int attackerAmnt)
{
	//damage = attacker roll amount - defense roll - defense armor
	int inflictedDamage = 0;
	lostDefenseInd = false; //reset to false
	this->defenseAmnt = this->generateDefense();

	//take input of attack generated by oponent and adjust according to armor and special attributes
	inflictedDamage = attackerAmnt - this->defenseAmnt - this->armor;

	if (inflictedDamage > 0) // defense roll + armor did not deflect all damage
	{
		//subtract amount from strength 
		this->strength = this->strength - inflictedDamage;
	

		//check if character is still alive
		if (this->strength <= 0)
		{
			//character is dead
			this->healthStatus = DEAD;
		}
		if (this->strength <= 8 && this->strength > 4)
		{   //should be 2 die at this point
			this->defenseRounds = 2;
			lostDefenseInd = true;
		}
		if (this->strength <= 4 && this->strength > 0)
		{   //now drop down to 1 die
			this->defenseRounds = 1;
			lostDefenseInd = true;
		}
		if (this->strength <= 0) //bluemen is dead but loses his last die anyway
		{
			this->defenseRounds = 0;
			lostDefenseInd = true;
		}
	}
	else if (inflictedDamage <= 0) //character has more defense than attack
	{
		//do not change strength
	}

	return inflictedDamage;
}



/******************************************************************
*                       Bluemen::Defend()
* Generates defense calculation of actual damage to be inflicted
/******************************************************************/
void Bluemen::printCharacterInfo()
{

	cout << " | Strength: " << this->strength << " | Armor: " << this->armor << " | Defense Die: "
		 << this->defenseRounds
		 << " |" << endl;

}


/******************************************************************
*                       Bluemen::printSpecialAbility()
* Prints special ability information based on state of lostDefenseInd
* flag. Resets flag after printing so it will not print again
* until another die is lost.
/******************************************************************/
void Bluemen::printSpecialAbility()
{
	if (lostDefenseInd == true)
	{
		int nbr = (this->defenseRounds - 3) * -1;
		//print if special ability happened
		cout << "Lost " << nbr << " total defense die due to damage." << endl;
		
		//reset indicator
		lostDefenseInd = false;
	}
}