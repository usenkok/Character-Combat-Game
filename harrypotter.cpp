/*********************************************************************
** Program name: harrypotter.cpp
** Author: Kelly Usenko
** Date: 5/14/2018
** Description: Implementation of harrypotter derived class
*********************************************************************/

#include "harrypotter.hpp"

/******************************************************************
*                       HarryPotter::HarryPotter()
* Default constructor
/******************************************************************/
HarryPotter::HarryPotter()
{
	
	this->attackAmnt = 0;
	this->attackRounds = 2;
	this->attackRange = 6;

	this->defenseAmnt = 0;
	this->defenseRounds = 2;
	this->defenseRange = 6;

	this->name = "Harry Potter";
	this->armor = 0;
	this->strength = 10;

	this->healthStatus = ALIVE;
	this->charType = HARRY_POTTER;
	this->specialAbility = true;
	this->hogwartsInd = false;
	this->hogwartsCount = 0;

	//create attack and defense die
	this->attackDie = new Die(attackRange);
	this->defenseDie = new Die(defenseRange);

}

/******************************************************************
*                       HarryPotter::~HarryPotter()
* Destructor
/******************************************************************/
HarryPotter::~HarryPotter()
{
	if (this->attackDie != NULL)
	{
		delete this->attackDie;
	}

	if (this->defenseDie != NULL)
	{
		delete this->defenseDie;
	}
}

/******************************************************************
*                       HarryPotter::defend(int attackerAmnt)
* Specialized defend function that accounts for special ability to 
* respawn with double health
/******************************************************************/
int HarryPotter::defend(int attackerAmnt)
{
	//damage = attacker roll amount - defense roll - defense armor

	int inflictedDamage = 0;
	this->hogwartsInd = false; //reset flag so it only prints once when used
	this->defenseAmnt = this->generateDefense();

	//take input of attack generated by oponent and adjust according to armor and special attributes
	inflictedDamage = attackerAmnt - this->defenseAmnt - this->armor;

	if (inflictedDamage > 0) // defense roll + armor did not deflect all damage
	{
		//subtract amount from strength 
		this->strength = this->strength - inflictedDamage;

		//check if character is still alive
		if (this->strength <= 0)
		{
			if (this->hogwartsCount >= 1)
			{
				//character is dead
				this->healthStatus = DEAD;
			}
			else //hogwarts not used yet
			{
				this->hogwartsInd = true;
				this->hogwartsCount++;
				
				//use hogwarts ability and reset health to full and double it
				this->strength = 20;
				//inflictedDamage = 0;
			}
		}
	}
	else if (inflictedDamage <= 0) //character has more defense than attack
	{
		//do not change strength
	}

	return inflictedDamage;
}


/******************************************************************
*                       HarryPotter::printSpecialAbility()
* Adds additional print statement if special ability activated
/******************************************************************/

void HarryPotter::printSpecialAbility()
{
	//print if special ability occured
	if (this->hogwartsInd)
	{
		cout << "\n ########### HOGWARTS ABILITY USED ###########" << endl;
		cout << " ################## REBIRTH ##################" << endl;
	}
	// reset indicator
	this->hogwartsInd = false;
}
